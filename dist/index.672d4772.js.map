{"mappings":"AAAA;AAEA,iBAAiB;AAEjB,MAAM,QAAQ,SAAS,aAAa,CAAC;AAErC,MAAM,SAAS,SAAS,aAAa,CAAC;AACtC,MAAM,MAAM,OAAO,UAAU,CAAC,OAAO,eAAe;AAEpD,MAAM,aAAa,SAAS,aAAa,CAAC;AAC1C,MAAM,UAAU,WAAW,UAAU,CAAC;AAEtC,MAAM,eAAe,IAAI,OAAO,YAAY;AAE5C,UAAU;AACV,MAAM,UAAU;IACf,MAAM;IACN,OAAO;AACR;AACA,MAAM,gBAAgB,SAAS,gBAAgB,CAC9C;AAGD,SAAS,aAAa,KAAK,EAAE;IAC5B,MAAM,EAAE,MAAK,EAAE,KAAI,EAAE,GAAG,MAAM,aAAa;IAC3C,OAAO,CAAC,KAAK,GAAG,WAAW;AAC5B;AAEA,cAAc,OAAO,CAAC,CAAC,QAAU,MAAM,gBAAgB,CAAC,SAAS;AACjE,sDAAsD;AAEtD,+FAA+F;AAE/F,eAAe,gBAAgB;IAC9B,MAAM,SAAS,MAAM,UAAU,YAAY,CAAC,YAAY,CAAC;QACxD,OAAO;YAAE,OAAO;YAAM,QAAQ;QAAI;IACnC;IACA,MAAM,SAAS,GAAG;IAClB,MAAM,MAAM,IAAI;AACjB;AAEA,qDAAqD;AAErD,OAAO,KAAK,GAAG,MAAM,UAAU;AAC/B,OAAO,MAAM,GAAG,MAAM,WAAW;AACjC,WAAW,KAAK,GAAG,MAAM,UAAU;AACnC,WAAW,MAAM,GAAG,MAAM,WAAW;AAErC,iBAAiB;AACjB,eAAe,SAAS;IACvB,MAAM,QAAQ,MAAM,aAAa,MAAM,CAAC;IACxC,QAAQ,GAAG,CAAC;IACZ,qFAAqF;IACrF,MAAM,OAAO,CAAC,WAAW,uCAAuC;IAChE,MAAM,OAAO,CAAC;IACd,sBAAsB,SAAS,mDAAmD;AACnF;AAEA,SAAS,SAAS,IAAI,EAAE;IACvB,MAAM,EAAE,MAAK,EAAE,OAAM,EAAE,IAAG,EAAE,KAAI,EAAE,GAAG,KAAK,WAAW;IACrD,IAAI,SAAS,CAAC,GAAG,GAAG,OAAO,KAAK,EAAE,OAAO,MAAM,GAAG,sBAAsB;IACxE,IAAI,WAAW,GAAG;IAClB,IAAI,SAAS,GAAG;IAChB,IAAI,UAAU,CAAC,MAAM,KAAK,OAAO,SAAS,kBAAkB;AAC7D;AACA,WAAW;AACX,SAAS,OAAO,EAAE,aAAa,KAAI,EAAE,EAAE;IACtC,QAAQ,qBAAqB,GAAG,KAAK,EAAE,yBAAyB;IAChE,QAAQ,SAAS,CAAC,GAAG,GAAG,WAAW,KAAK,EAAE,WAAW,MAAM;IAC3D,qBAAqB;IACrB,QAAQ,SAAS,CAChB,qBAAqB;IACrB,OACA,KAAK,CAAC,EACN,KAAK,CAAC,EACN,KAAK,KAAK,EACV,KAAK,MAAM,EACX,cAAc;IACd,KAAK,CAAC,EACN,KAAK,CAAC,EACN,QAAQ,IAAI,EACZ,QAAQ,IAAI;IAEb,4CAA4C;IAC5C,MAAM,QAAQ,KAAK,KAAK,GAAG,QAAQ,KAAK;IACxC,MAAM,SAAS,KAAK,KAAK,GAAG,QAAQ,KAAK;IAEzC,QAAQ,SAAS,CAChB,YACA,KAAK,CAAC,EACN,KAAK,CAAC,EACN,QAAQ,IAAI,EACZ,QAAQ,IAAI,EACZ,eAAe;IACf,KAAK,CAAC,GAAI,CAAA,QAAQ,KAAK,KAAK,GAAG,CAAA,GAC/B,KAAK,CAAC,GAAI,CAAA,SAAS,KAAK,MAAM,GAAG,CAAA,GACjC,KAAK,KAAK,EACV,KAAK,MAAM;AAEb;AAEA,gBAAgB,IAAI,CAAC","sources":["script.js"],"sourcesContent":["\"use strict\";\r\n\r\n//select elements\r\n\r\nconst video = document.querySelector(\".webcam\");\r\n\r\nconst canvas = document.querySelector(\".video\");\r\nconst ctx = canvas.getContext(\"2d\"); //ctx - context\r\n\r\nconst faceCanvas = document.querySelector(\".face\");\r\nconst faceCtx = faceCanvas.getContext(\"2d\");\r\n\r\nconst faceDetector = new window.FaceDetector();\r\n\r\n//sliders:\r\nconst options = {\r\n\tSIZE: 10,\r\n\tSCALE: 1.35,\r\n};\r\nconst optionsInputs = document.querySelectorAll(\r\n\t'.controls input[type=\"range\"]'\r\n);\r\n\r\nfunction handleOption(event) {\r\n\tconst { value, name } = event.currentTarget;\r\n\toptions[name] = parseFloat(value);\r\n}\r\n\r\noptionsInputs.forEach((input) => input.addEventListener(\"input\", handleOption));\r\n// write a function that will populate the users video\r\n\r\n// as function returns promise (due to it needs to wait for camera ), need to use async - await\r\n\r\nasync function populateVideo() {\r\n\tconst stream = await navigator.mediaDevices.getUserMedia({\r\n\t\tvideo: { width: 1280, height: 720 },\r\n\t});\r\n\tvideo.srcObject = stream;\r\n\tawait video.play();\r\n}\r\n\r\n// size the canvases to be the same size as the video\r\n\r\ncanvas.width = video.videoWidth;\r\ncanvas.height = video.videoHeight;\r\nfaceCanvas.width = video.videoWidth;\r\nfaceCanvas.height = video.videoHeight;\r\n\r\n// face detection\r\nasync function detect() {\r\n\tconst faces = await faceDetector.detect(video);\r\n\tconsole.log(faces);\r\n\t// ask the browser when the next animation frame is, and tell it to run detect for us\r\n\tfaces.forEach(drawFace); // for each face found it runs drawFace\r\n\tfaces.forEach(censor);\r\n\trequestAnimationFrame(detect); // recursion - function run itself inside of itself\r\n}\r\n\r\nfunction drawFace(face) {\r\n\tconst { width, height, top, left } = face.boundingBox;\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height); // clear what is drawn\r\n\tctx.strokeStyle = \"#ffc600\";\r\n\tctx.lineWidth = 2;\r\n\tctx.strokeRect(left, top, width, height); //rect = rectangle\r\n}\r\n//pixel it:\r\nfunction censor({ boundingBox: face }) {\r\n\tfaceCtx.imageSmoothingEnabled = false; //prevent bluring pixels;\r\n\tfaceCtx.clearRect(0, 0, faceCanvas.width, faceCanvas.height);\r\n\t//draw the small face\r\n\tfaceCtx.drawImage(\r\n\t\t// 5 source arguments\r\n\t\tvideo, // where does the source come from?\r\n\t\tface.x, // where do we start the source pull from?\r\n\t\tface.y,\r\n\t\tface.width, //how width and height we want it to go\r\n\t\tface.height,\r\n\t\t// 4 draw args\r\n\t\tface.x, // where should we start drawing the x and y\r\n\t\tface.y,\r\n\t\toptions.SIZE,\r\n\t\toptions.SIZE\r\n\t);\r\n\t// draw the small face back on, but scale up\r\n\tconst width = face.width * options.SCALE;\r\n\tconst height = face.width * options.SCALE;\r\n\r\n\tfaceCtx.drawImage(\r\n\t\tfaceCanvas, // source\r\n\t\tface.x, // where do we start the source pull from?\r\n\t\tface.y,\r\n\t\toptions.SIZE, //how width and height we want it to go\r\n\t\toptions.SIZE,\r\n\t\t// drawing args\r\n\t\tface.x - (width - face.width / 2),\r\n\t\tface.y - (height - face.heigth / 2),\r\n\t\tface.width,\r\n\t\tface.height\r\n\t);\r\n}\r\n\r\npopulateVideo().then(detect);\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}